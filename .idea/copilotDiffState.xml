<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/weuniteauth/service/UserServiceVisibilityTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/weuniteauth/service/UserServiceVisibilityTest.java" />
              <option name="updatedContent" value="package com.example.weuniteauth.service;&#10;&#10;import com.example.weuniteauth.domain.User;&#10;import com.example.weuniteauth.dto.ResponseDTO;&#10;import com.example.weuniteauth.dto.UserDTO;&#10;import com.example.weuniteauth.exceptions.user.UserNotFoundException;&#10;import com.example.weuniteauth.mapper.UserMapper;&#10;import com.example.weuniteauth.repository.UserRepository;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import org.junit.jupiter.api.extension.ExtendWith;&#10;import org.mockito.InjectMocks;&#10;import org.mockito.Mock;&#10;import org.mockito.junit.jupiter.MockitoExtension;&#10;&#10;import java.time.Instant;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.mockito.Mockito.*;&#10;&#10;@ExtendWith(MockitoExtension.class)&#10;class UserServiceVisibilityTest {&#10;&#10;    @Mock&#10;    private UserRepository userRepository;&#10;&#10;    @Mock&#10;    private UserMapper userMapper;&#10;&#10;    @InjectMocks&#10;    private UserService userService;&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should update user visibility to private successfully&quot;)&#10;    void updateUserVisibilityToPrivateSuccess() {&#10;        String username = &quot;testuser&quot;;&#10;        boolean isPrivate = true;&#10;&#10;        User mockUser = new User();&#10;        mockUser.setId(1L);&#10;        mockUser.setUsername(username);&#10;        mockUser.setName(&quot;Test User&quot;);&#10;        mockUser.setEmail(&quot;test@example.com&quot;);&#10;        mockUser.setPrivate(false);&#10;        mockUser.setCreatedAt(Instant.now());&#10;        mockUser.setUpdatedAt(Instant.now());&#10;&#10;        UserDTO expectedUserDTO = new UserDTO(&#10;                mockUser.getId().toString(),&#10;                mockUser.getName(),&#10;                mockUser.getUsername(),&#10;                mockUser.getBio(),&#10;                mockUser.getEmail(),&#10;                mockUser.getProfileImg(),&#10;                true,&#10;                mockUser.getCreatedAt(),&#10;                mockUser.getUpdatedAt()&#10;        );&#10;&#10;        ResponseDTO&lt;UserDTO&gt; expectedResponse = new ResponseDTO&lt;&gt;(&#10;                &quot;Visibilidade atualizada com sucesso!&quot;,&#10;                expectedUserDTO&#10;        );&#10;&#10;        when(userRepository.findByUsername(username)).thenReturn(Optional.of(mockUser));&#10;        when(userRepository.save(any(User.class))).thenReturn(mockUser);&#10;        when(userMapper.toResponseDTO(&quot;Visibilidade atualizada com sucesso!&quot;, mockUser))&#10;                .thenReturn(expectedResponse);&#10;&#10;        ResponseDTO&lt;UserDTO&gt; result = userService.updateUserVisibility(username, isPrivate);&#10;&#10;        assertNotNull(result);&#10;        assertEquals(&quot;Visibilidade atualizada com sucesso!&quot;, result.message());&#10;        assertTrue(result.data().isPrivate());&#10;&#10;        verify(userRepository).findByUsername(username);&#10;        verify(userRepository).save(mockUser);&#10;        verify(userMapper).toResponseDTO(&quot;Visibilidade atualizada com sucesso!&quot;, mockUser);&#10;&#10;        assertTrue(mockUser.isPrivate());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should update user visibility to public successfully&quot;)&#10;    void updateUserVisibilityToPublicSuccess() {&#10;        String username = &quot;testuser&quot;;&#10;        boolean isPrivate = false;&#10;&#10;        User mockUser = new User();&#10;        mockUser.setId(1L);&#10;        mockUser.setUsername(username);&#10;        mockUser.setName(&quot;Test User&quot;);&#10;        mockUser.setEmail(&quot;test@example.com&quot;);&#10;        mockUser.setPrivate(true);&#10;        mockUser.setCreatedAt(Instant.now());&#10;        mockUser.setUpdatedAt(Instant.now());&#10;&#10;        UserDTO expectedUserDTO = new UserDTO(&#10;                mockUser.getId().toString(),&#10;                mockUser.getName(),&#10;                mockUser.getUsername(),&#10;                mockUser.getBio(),&#10;                mockUser.getEmail(),&#10;                mockUser.getProfileImg(),&#10;                false,&#10;                mockUser.getCreatedAt(),&#10;                mockUser.getUpdatedAt()&#10;        );&#10;&#10;        ResponseDTO&lt;UserDTO&gt; expectedResponse = new ResponseDTO&lt;&gt;(&#10;                &quot;Visibilidade atualizada com sucesso!&quot;,&#10;                expectedUserDTO&#10;        );&#10;&#10;        when(userRepository.findByUsername(username)).thenReturn(Optional.of(mockUser));&#10;        when(userRepository.save(any(User.class))).thenReturn(mockUser);&#10;        when(userMapper.toResponseDTO(&quot;Visibilidade atualizada com sucesso!&quot;, mockUser))&#10;                .thenReturn(expectedResponse);&#10;&#10;        ResponseDTO&lt;UserDTO&gt; result = userService.updateUserVisibility(username, isPrivate);&#10;&#10;        assertNotNull(result);&#10;        assertEquals(&quot;Visibilidade atualizada com sucesso!&quot;, result.message());&#10;        assertFalse(result.data().isPrivate());&#10;&#10;        verify(userRepository).findByUsername(username);&#10;        verify(userRepository).save(mockUser);&#10;        verify(userMapper).toResponseDTO(&quot;Visibilidade atualizada com sucesso!&quot;, mockUser);&#10;&#10;        assertFalse(mockUser.isPrivate());&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Should throw UserNotFoundException when user does not exist&quot;)&#10;    void updateUserVisibilityWithNonExistentUser() {&#10;        String username = &quot;nonexistent&quot;;&#10;        boolean isPrivate = true;&#10;&#10;        when(userRepository.findByUsername(username)).thenReturn(Optional.empty());&#10;&#10;        UserNotFoundException exception = assertThrows(UserNotFoundException.class, () -&gt; {&#10;            userService.updateUserVisibility(username, isPrivate);&#10;        });&#10;&#10;        assertNotNull(exception);&#10;        verify(userRepository).findByUsername(username);&#10;        verify(userRepository, never()).save(any(User.class));&#10;        verifyNoInteractions(userMapper);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>